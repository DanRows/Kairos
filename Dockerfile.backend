# Build stage
FROM rust:1.82-slim as builder

# Install system dependencies
RUN apt-get update && apt-get install -y \
    pkg-config \
    libssl-dev \
    libpq-dev \
    && rm -rf /var/lib/apt/lists/*

WORKDIR /app
COPY backend/Cargo.toml backend/Cargo.lock ./
COPY shared ../shared
COPY shared_types ../shared_types
RUN mkdir -p src && echo "fn main() { println!(\"Hello, world!\"); }" > src/main.rs
RUN cargo build --release && rm -rf src

COPY backend/src ./src
COPY backend/migrations ./migrations
COPY .env ./

# Install diesel CLI
RUN cargo install diesel_cli --no-default-features --features postgres

RUN cargo build --release

# Runtime stage
FROM debian:bookworm-slim

RUN apt-get update && apt-get install -y \
    libpq5 \
    ca-certificates \
    curl \
    postgresql-client \
    && rm -rf /var/lib/apt/lists/*

WORKDIR /app
COPY --from=builder /app/target/release/kairos-backend .
COPY --from=builder /app/migrations ./migrations
COPY --from=builder /usr/local/cargo/bin/diesel /usr/local/bin/diesel
COPY .env ./

EXPOSE 8080
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:8080/health || exit 1

# Script de inicio que espera a la base de datos y ejecuta las migraciones
COPY docker-entrypoint.sh /usr/local/bin/
RUN chmod +x /usr/local/bin/docker-entrypoint.sh

ENTRYPOINT ["docker-entrypoint.sh"]
CMD ["./kairos-backend"] 